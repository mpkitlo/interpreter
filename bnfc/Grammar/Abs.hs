-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Grammar.Abs where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Prog [Decl]
  deriving (Eq, Ord, Show, Read)

data Decl
    = VarDecl Type Ident
    | VarDeclAss Type Ident Expr
    | FnDecl Type Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Arg = ValArg Type Ident | RefArg Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Blk [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | DStmt Decl
    | Ass Ident Expr
    | Ret Expr
    | VRet
    | Cond Expr Block
    | CondElse Expr Block Block
    | While Expr Block
    | Break
    | Continue
    | SExp Expr
    | Print Expr
  deriving (Eq, Ord, Show, Read)

data Type = Int | Str | Bool | Void
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

